AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample application to demonstrate orchestration and choreography in AWS Serverless with AWS Step Functions and Amazon EventBridge

Parameters:
  MongoDBDataURL:
    Type: String
    Default: https://data.mongodb-api.com/app/<data-app>/endpoint/data/beta/action/
  MyAPIKeyName:
    Type: String
    Default: '<<Enter your APIKeyName>>'
  MongoDBAPIKeyValue:
    NoEcho: true
    Type: String
    Default: '<<Enter your APIKeyValue>>'
  MongoDBCustomEventBus:
    Type: String
    Default: <<CustomBusName>>

Resources:
  ########################   S3 bucket with EventBridge configuration   ############################
  CelebBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      # Amazon EventBridge receives notifications for all events in the bucket.
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
  ########################   Custom managed policy for state machine   ############################
  CustomerManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Action: "rekognition:RecognizeCelebrities"
            Resource: "*"
          - Effect: Allow
            Action: "events:PutEvents"
            Resource: "*"
  ########################   State Machine for Step Functions with EventBrdige API destinations   ############################
  SfnEBStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: state-machine/rekognize-eb-api-destination.asl.json
      DefinitionSubstitutions:
        EBBus: !Ref MyEventBus
      Policies:
        - !Ref CustomerManagedPolicy 
        - S3ReadPolicy:
            BucketName: !Ref CelebBucket
      # The Step Functions workflow is triggered each time an object is created in our S3 bucket.
      Events:
        StateChange:
          Type: EventBridgeRule
          Properties:
            EventBusName: default
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref CelebBucket
        
  ########################   Custom Event Bus   ############################
  MyEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref MongoDBCustomEventBus

 ########################   API Connection   ############################
  MyConnection:
    Type: AWS::Events::Connection
    Properties:
      AuthorizationType: API_KEY
      Description: 'My connection with an API key'
      AuthParameters:
        ApiKeyAuthParameters:
          ApiKeyName: !Ref MyAPIKeyName
          ApiKeyValue: !Ref MongoDBAPIKeyValue

  ########################   API Destination   ############################
  MyApiDestination:
    Type: AWS::Events::ApiDestination
    Properties:
      Name: 'MongoDBAPIDestination'
      ConnectionArn: !GetAtt MyConnection.Arn
      InvocationEndpoint: !Ref MongoDBDataURL
      HttpMethod: POST
      InvocationRateLimitPerSecond: 10
  
  ########################   IAM Role to authorize API Destination invocations   ############################
  EventBridgeTargetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole      
      Policies:
        - PolicyName: AllowAPIdestinationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'events:InvokeApiDestination'
                Resource: !GetAtt MyApiDestination.Arn

  ########################   Dead letter queue   ############################
  MyDLQueue: 
    Type: AWS::SQS::Queue

  ########################   Event rule with API destination   ############################
  EventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "EventRule"
      State: "ENABLED"
      EventBusName: !Ref MyEventBus
      EventPattern: 
        source:
          - "sfn-api-destination"       
      Targets: 
        - Arn: !GetAtt MyApiDestination.Arn
          RoleArn: !GetAtt EventBridgeTargetRole.Arn
          Id: "MyAPIdestination"
          DeadLetterConfig:
            Arn: !GetAtt MyDLQueue.Arn
        

Outputs:
  MyEventBusName:
    Description: Application EventBus Name
    Value: !Ref MyEventBus

  MyEventBusArn:
    Description: Application EventBus ARN
    Value: !GetAtt MyEventBus.Arn

  MyConnectionName:
    Value: !Ref MyConnection
  MyConnectionArn:
    Value: !GetAtt MyConnection.Arn        

  MyApiDestinationName:
    Value: !Ref MyApiDestination
  MyApiDestinationArn:
    Value: !GetAtt MyApiDestination.Arn

  EventBridgeTargetRoleArn:
    Value: !GetAtt EventBridgeTargetRole.Arn

  MyDLQueue:
    Value: !GetAtt MyDLQueue.Arn